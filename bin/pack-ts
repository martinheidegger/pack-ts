#!/usr/bin/env node

const del = require('del')
const spawn = require('@jsdevtools/ez-spawn').async
const path = require('path')
const glob = require('glob-promise')
const fs = require('fs').promises

const clean = (path, logger) => logger.child(`Cleaning directory ${path}`, async () => {
  await del(path)
  await fs.mkdir(path, { recursive: true })
})

const writeFile = (target, data, logger) => logger.child(`Writing ${target}`, async () => fs.writeFile(target, data))
const readFile = (target, data, logger) => logger.child(`Reading ${target}`, async () => fs.readFile(target, data))

const copyFile = (from, to, parentLog) => parentLog.child(`Copy ${from} → ${to}`, async logger => {
  const made = await fs.mkdir(path.dirname(to), { recursive: true })
  if (made) {
    logger.info(`Created parent ${made}`)
  }
  await fs.writeFile(to, await fs.readFile(from))
})

const replaceAll = (filePattern, options, pattern, value, allLogger) => allLogger.child(`Replacing ${pattern} with "${value}" in ${filePattern}`, async logger => {
  const entries = await glob(filePattern, options)
  await Promise.all(entries.map(entry => async () => {
    const data = await fs.readFile(entry, 'utf-8')
    const newData = data.replace(pattern, value)
    if (newData !== data) {
      logger.info(`Updated ${entry}`)
      await fs.writeFile(entry, newData, logger)
    } else {
      logger.info(`Nothing to replace in ${entry}`)
    }
  }))
})

const spawnLog = (cmd, parentLog) => parentLog.child(`Spawning ${cmd}`, async logger => {
  const process = await spawn(cmd)
  logger.info(`Finished [${process.status}]`)
  return process
})

let currentLogger

function activate (logger) {
  currentLogger = logger
  if (currentLogger) {
    currentLogger.flushMsgs()
  }
}

class Logger {
  constructor (name, parent) {
    this.fifo = []
    this.name = name
    this.parent = parent
    this.indent = parent ? `${parent.indent}─` : ''
    this._process({ type: 'log', msg: `${this.indent}→ ${name}` })
  }
  _process (entry) {
    if (this === currentLogger) {
      if (entry.type === 'child') return activate(entry.logger)
      if (entry.type === 'info') return console.info(entry.msg)
      if (entry.type === 'log') return console.log(entry.msg)
      if (entry.type === 'error') return console.error(entry.msg)
      if (entry.type === 'warn') return console.warn(entry.msg)
    } else {
      this.fifo.push(entry)
    }
  }
  process (entry) {
    this._process({ ...entry, msg: `${this.indent}── ${String(entry.msg).replace(/\n/g, `\n${this.indent}  ` )}` })
  }
  log (msg) {
    this.process({ type: 'log', msg })
  }
  info (msg) {
    this.process({ type: 'info', msg })
  }
  error (msg) {
    this.process({ type: 'error', msg })
  }
  warn (msg) {
    this.process({ type: 'warn', msg })
  }
  flushMsgs () {
    if (currentLogger !== this) return
    while (this.fifo.length > 0) {
      this._process(this.fifo.shift())
      if (currentLogger !== this) {
        return
      }
    }
    if (this.closed) {
      activate(this.parent)
    }
  }
  async child (name, op) {
    const logger = new Logger(name, this)
    this._process({ type: 'child', logger })
    const res = await op(logger)
    logger.close()
    return res
  }
  close () {
    this.closed = true
    this.flushMsgs()
  }
}

async function log (name, op) {
  const logger = new Logger(name, null)
  if (currentLogger) {
    throw new Error('Only one root logger allowed.')
  }
  currentLogger = logger
  logger.flushMsgs()
  let res = await op(logger)
  logger.close()
  return res
}

log('pack-ts', async main => {
  await clean('./dist', main)
  await Promise.all([
    copyFile('./Readme.md', './dist/Readme.md', main),
    copyFile('./LICENSE', './dist/LICENSE', main),
    main.child('Building typescript', async logger => {
      await spawnLog('npm run build-ts', logger)
      await Promise.all([
        logger.child(`Deleting ./dist/**/__tests__ folder`, async () => {
          const entries = await glob('dist/**/__tests__')
          await Promise.all(entries.map(entry => del(entry)))
        }),
        replaceAll('dist/*/**/*.js.map', { ignore: '**/__tests__/**/*' }, /\.\.\/\.\.\/src/ig, '../src', logger),
        replaceAll('dist/**/*.js.map', { ignore: '**/__tests__/**/*' }, /\.\.\/src/ig, './src', logger)
      ])
    }),
    main.child('Copying source ts files from ./src → ./dist/src', async logger => {
      logger.info('Looking for ./src/**/*.ts files.')
      const matches = await glob('**/*.ts', {
        cwd: './src',
        ignore: '**/__tests__/**/*'
      })
      await Promise.all(matches.map(match => copyFile(`./src/${match}`, `./dist/src/${match}`, logger)))
    }),
    main.child('Reducing ./package.json', async logger => {
      const packageRaw = await readFile('./package.json', 'utf-8', logger)
      const package = JSON.parse(packageRaw)
      logger.info('Removing irrelevant package.json properties.')
      delete package.private
      delete package.scripts
      delete package.devDependencies
      delete package.jest
      delete package.eslintConfig
      delete package.eslintIgnore
      await writeFile('./dist/package.json', JSON.stringify(package, null, 2), logger)
    })
  ])
  main.info('done.')
})
  .catch(err => {
    console.error(err.stack)
    process.exit(1)
  })
